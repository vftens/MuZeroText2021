"use strict";
exports.__esModule = true;
exports.cnTabsTab = exports.TabsTab = exports.Tabs = exports.cnTabs = exports.tabsDefaultView = exports.tabsViews = exports.tabsDefaultSize = exports.tabsSizes = void 0;
var tslib_1 = require("tslib");
require("./Tabs.css");
var react_1 = tslib_1.__importStar(require("react"));
var useChoiceGroup_1 = require("../../hooks/useChoiceGroup/useChoiceGroup");
var useForkRef_1 = require("../../hooks/useForkRef/useForkRef");
var bem_1 = require("../../utils/bem");
var getSizeByMap_1 = require("../../utils/getSizeByMap");
var TabsTab_1 = require("./Tab/TabsTab");
exports.cnTabsTab = TabsTab_1.cnTabsTab;
exports.TabsTab = TabsTab_1.TabsTab;
exports.tabsSizes = ['m', 's'];
exports.tabsDefaultSize = exports.tabsSizes[0];
exports.tabsViews = ['bordered', 'clear'];
exports.tabsDefaultView = exports.tabsViews[0];
exports.cnTabs = bem_1.cn('Tabs');
var sizeMap = {
    s: 'xs',
    m: 's'
};
function setStyleForLine(lineRef, tabsWidth, tabWidth, tabRatio, tabOffsetLeft) {
    if (lineRef.current) {
        var lineStyle = lineRef.current.style;
        lineStyle.setProperty('--tabsWidth', tabsWidth + "px");
        lineStyle.setProperty('--tabWidth', tabWidth + "px");
        lineStyle.setProperty('--tabRatio', "" + tabRatio);
        lineStyle.setProperty('--tabOffsetLeft', tabOffsetLeft + "px");
    }
}
function renderItemDefault(props) {
    var ref = props.ref, onChange = props.onChange, otherProps = tslib_1.__rest(props, ["ref", "onChange"]);
    return (react_1["default"].createElement(TabsTab_1.TabsTab, tslib_1.__assign({}, otherProps, { ref: ref, onChange: onChange })));
}
exports.Tabs = react_1["default"].forwardRef(function (props, ref) {
    var _a = props.size, size = _a === void 0 ? exports.tabsDefaultSize : _a, className = props.className, items = props.items, _b = props.view, view = _b === void 0 ? exports.tabsDefaultView : _b, value = props.value, onlyIcon = props.onlyIcon, getIcon = props.getIcon, getLabel = props.getLabel, onChange = props.onChange, iconSizeProp = props.iconSize, _c = props.renderItem, renderItem = _c === void 0 ? renderItemDefault : _c, otherProps = tslib_1.__rest(props, ["size", "className", "items", "view", "value", "onlyIcon", "getIcon", "getLabel", "onChange", "iconSize", "renderItem"]);
    var _d = useChoiceGroup_1.useChoiceGroup({
        value: value || null,
        getKey: getLabel,
        callBack: onChange,
        multiple: false
    }), getOnChange = _d.getOnChange, getChecked = _d.getChecked;
    var _e = react_1.useState(false), mounted = _e[0], setMounted = _e[1];
    var constructItemRefs = function () {
        var refs = {};
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            refs[getLabel(item)] = react_1.createRef();
        }
        return refs;
    };
    var buttonRefs = react_1.useMemo(constructItemRefs, [items, getLabel]);
    var rootRef = react_1.useRef(null);
    var lineRef = react_1.useRef(null);
    var updateLine = function () {
        if (rootRef.current && lineRef.current && buttonRefs) {
            var rootWidth = rootRef.current.offsetWidth;
            if (value) {
                var activeItemRef = buttonRefs[getLabel(value)];
                if (activeItemRef && activeItemRef.current) {
                    var itemWidth = activeItemRef.current.offsetWidth;
                    var itemOffsetLeft = activeItemRef.current.offsetLeft;
                    setStyleForLine(lineRef, rootWidth, itemWidth, itemWidth / rootWidth, itemOffsetLeft);
                }
            }
            else {
                setStyleForLine(lineRef, rootWidth, 1, 0.00001, 1);
            }
        }
    };
    react_1.useEffect(function () {
        updateLine();
    });
    var onMount = react_1.useCallback(function () {
        updateLine();
        setMounted(true);
    }, [updateLine]);
    var withOutValue = !value;
    var iconSize = getSizeByMap_1.getSizeByMap(sizeMap, size, iconSizeProp);
    return (react_1["default"].createElement("div", tslib_1.__assign({ className: exports.cnTabs({ size: size, view: view }, [className]), ref: useForkRef_1.useForkRef([ref, rootRef, onMount]) }, otherProps),
        react_1["default"].createElement("div", { className: exports.cnTabs('List') }, items.map(function (item) {
            return renderItem({
                item: item,
                ref: buttonRefs[getLabel(item)],
                key: getLabel(item),
                onChange: getOnChange(item),
                checked: getChecked(item),
                label: getLabel(item).toString(),
                icon: getIcon && getIcon(item),
                iconSize: iconSize,
                onlyIcon: onlyIcon,
                className: exports.cnTabs('Tab')
            });
        })),
        react_1["default"].createElement("div", { className: exports.cnTabs('WrapperRunningLine') },
            react_1["default"].createElement("div", { className: exports.cnTabs('RunningLine', { withOutValue: withOutValue, mounted: mounted }), ref: lineRef }))));
});
