"use strict";
exports.__esModule = true;
exports.useSelectedFilters = exports.filterTableData = exports.getSelectedFiltersList = exports.isSelectedFiltersPresent = exports.fieldFiltersPresent = exports.getSelectedFiltersInitialState = exports.getOptionsForFilters = void 0;
var tslib_1 = require("tslib");
var react_1 = require("react");
var type_guards_1 = require("../../utils/type-guards");
exports.getOptionsForFilters = function (filters, field) {
    return filters
        .filter(function (_a) {
        var filterField = _a.field;
        return filterField === field;
    })
        .map(function (_a) {
        var id = _a.id, name = _a.name;
        return ({ value: id, label: name });
    });
};
exports.getSelectedFiltersInitialState = function (filters) {
    if (!filters) {
        return {};
    }
    return filters.reduce(function (fieldAcc, fieldCur) {
        var _a;
        if (!fieldAcc[fieldCur.field]) {
            return tslib_1.__assign(tslib_1.__assign({}, fieldAcc), (_a = {}, _a[fieldCur.field] = [], _a));
        }
        return fieldAcc;
    }, {});
};
exports.fieldFiltersPresent = function (tableFilters, field) {
    return tableFilters.some(function (_a) {
        var filterField = _a.field;
        return filterField === field;
    });
};
exports.isSelectedFiltersPresent = function (selectedFilters) {
    return Object.values(selectedFilters).some(function (filterGroup) { return filterGroup && filterGroup.length > 0; });
};
exports.getSelectedFiltersList = function (_a) {
    var filters = _a.filters, selectedFilters = _a.selectedFilters, columns = _a.columns;
    return columns.reduce(function (acc, cur) {
        var currentFieldFilters = selectedFilters[cur.accessor] || [];
        var orderedFilters = [];
        if (currentFieldFilters.length) {
            orderedFilters = currentFieldFilters
                .map(function (filter) {
                var option = filters.find(function (_a) {
                    var filterId = _a.id;
                    return filterId === filter;
                });
                return option
                    ? {
                        id: option.id,
                        name: option.name
                    }
                    : undefined;
            })
                .filter(type_guards_1.isDefined);
        }
        return currentFieldFilters.length ? tslib_1.__spreadArrays(acc, orderedFilters) : acc;
    }, []);
};
exports.filterTableData = function (_a) {
    var data = _a.data, filters = _a.filters, selectedFilters = _a.selectedFilters;
    var mutableFilteredData = [];
    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
        var row = data_1[_i];
        var columnNames = Object.keys(row);
        var rowIsValid = true;
        for (var _b = 0, columnNames_1 = columnNames; _b < columnNames_1.length; _b++) {
            var columnName = columnNames_1[_b];
            var columnFilters = selectedFilters[columnName];
            if (columnFilters && columnFilters.length) {
                var cellIsValid = false;
                var _loop_1 = function (filterId) {
                    var filter = filters.find(function (_a) {
                        var id = _a.id;
                        return id === filterId;
                    });
                    var cellContent = row[columnName];
                    if (filter && filter.filterer(cellContent)) {
                        cellIsValid = true;
                        return "break";
                    }
                };
                for (var _c = 0, columnFilters_1 = columnFilters; _c < columnFilters_1.length; _c++) {
                    var filterId = columnFilters_1[_c];
                    var state_1 = _loop_1(filterId);
                    if (state_1 === "break")
                        break;
                }
                if (!cellIsValid) {
                    rowIsValid = false;
                }
            }
            if (!rowIsValid) {
                break;
            }
        }
        if (rowIsValid) {
            mutableFilteredData.push(row);
        }
    }
    return mutableFilteredData;
};
/* istanbul ignore next */
exports.useSelectedFilters = function (filters, onFiltersUpdated) {
    var _a = react_1.useState(exports.getSelectedFiltersInitialState(filters)), selectedFilters = _a[0], setSelectedFilters = _a[1];
    var updateSelectedFilters = function (field, tooltipSelectedFilters) {
        var _a;
        var newSelectedFilters = tslib_1.__assign(tslib_1.__assign({}, selectedFilters), (_a = {}, _a[field] = tslib_1.__spreadArrays(tooltipSelectedFilters), _a));
        setSelectedFilters(newSelectedFilters);
        onFiltersUpdated && onFiltersUpdated(newSelectedFilters);
    };
    var removeOneSelectedFilter = function (availableFilters, filter) {
        var filterToDelete = availableFilters.find(function (_a) {
            var id = _a.id;
            return id === filter;
        });
        if (filterToDelete) {
            updateSelectedFilters(filterToDelete.field, (selectedFilters[filterToDelete.field] || []).filter(function (f) { return f !== filter; }));
        }
    };
    var removeAllSelectedFilters = function (availableFilters) {
        setSelectedFilters(exports.getSelectedFiltersInitialState(availableFilters));
    };
    return {
        selectedFilters: selectedFilters,
        updateSelectedFilters: updateSelectedFilters,
        removeOneSelectedFilter: removeOneSelectedFilter,
        removeAllSelectedFilters: removeAllSelectedFilters
    };
};
